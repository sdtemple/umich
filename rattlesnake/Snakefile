# Snakemake tutorial
# Seth Temple
# sethtem@umich.edu

# Python is the overhead in snakemake
# You can write python directly in these

import os

# Bring in relevant values in YAML file
folder = str(config['folder'])
num_players = int(config['num_players'])
yam = str(config['yaml'])

# Initialize the folder
if not os.path.exists(folder):
    os.mkdir(folder)

# Initialize the chain of events
# I.e., `rule linux` takes as input these files
# So, if these don't exist, the rule `linux` will be confused
for n in range(1, num_players + 1):
    f=open(folder + '/file' + str(n) + '.txt', 'w')
    f.write('Hello, World!')
    f.close()

# You can organize your code with additional rules in other files
# Best practice is to create the subfolder `rules/`
# And define these as *.smk for snakemake file type
include: 'rules/R.smk'

# When you don't specific the Snakefile -s, 
# this rule is the final one
# All rules up to this one should lead to this input
rule all:
    input:
        [folder + '/console-message-' + str(n) + '.txt'
            for n in range(1,num_players+1)],
    output:
        yaml=folder + '/reproduce.yaml',
    params:
        yaml=yam,
    shell:
        """
        cp {params.yaml} {output.yaml}
        """

# Wildcards look for prior wildcards in the directed acyclical graph
# I strictly use `shell`, but there are commands like `script` and `run`
rule linux:
    input:
        textfile='{folder}/file{num}.txt',
    output:
        linuxfile='{folder}/linuxfile{num}.txt'
    shell:
        'echo {wildcards.num} >> {output.linuxfile}'

# You can bring in additional parameters with the `params:`
# I bring in details from my config file
# Or, something I computed with Python in this file
# Values in one file do not carry over to another file!
# If you define it in `Snakefile`, it will not be in `rules/R.smk`
rule py:
    input:
        Rfile='{folder}/Rfile{number}.txt',
    output:
        pyfile='{folder}/console-message-{number}.txt',
    params:
        character = str(config['character']),
    shell:
        'python scripts/greetings.py {input.Rfile} {output.pyfile} {wildcards.number} {params.character}'
